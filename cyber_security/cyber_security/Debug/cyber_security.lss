
cyber_security.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00000c24  00000cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008000f6  008000f6  00000d4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002247  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc3  00000000  00000000  000031b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001075  00000000  00000000  00003d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00004dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ab  00000000  00000000  000051c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017d7  00000000  00000000  00005973  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000714a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3f       	cpi	r26, 0xF6	; 246
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 ef       	ldi	r26, 0xF6	; 246
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 31       	cpi	r26, 0x16	; 22
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <main>
  8a:	0c 94 10 06 	jmp	0xc20	; 0xc20 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <encryptMessage>:
 
 //u8 req_arr[5];
 u8 encryptMessage(u8 message)
 {
	return message ^ message ;
 }
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	08 95       	ret

00000096 <UDS_Init>:
 void UDS_Init(void){
	 DIO_INIT();
  96:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_INIT>
	 
	 USART_Init();
  9a:	0e 94 b1 04 	call	0x962	; 0x962 <USART_Init>
	 LCD_Init();
  9e:	0e 94 81 02 	call	0x502	; 0x502 <LCD_Init>
  a2:	08 95       	ret

000000a4 <UDS_Receive>:
 }

 void UDS_Receive(u8 * arr){
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	7c 01       	movw	r14, r24
	 u8 i = 0;
	 for (i=0;; i++)
  b0:	c0 e0       	ldi	r28, 0x00	; 0
	 {
		 arr[i] = USART_Receive();
  b2:	87 01       	movw	r16, r14
  b4:	0c 0f       	add	r16, r28
  b6:	11 1d       	adc	r17, r1
  b8:	0e 94 ca 04 	call	0x994	; 0x994 <USART_Receive>
  bc:	f8 01       	movw	r30, r16
  be:	80 83       	st	Z, r24
		 // if temp is not a valid hex character
		/* if (((temp >= '0' && temp <= '9') || (temp >= 'A' && temp <= 'F') || (temp >= 'a' && temp <= 'f')))
		 {
			 arr[i] =temp;
		 }*/
		 if (arr[i]==' ')
  c0:	80 32       	cpi	r24, 0x20	; 32
  c2:	41 f0       	breq	.+16     	; 0xd4 <UDS_Receive+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e1       	ldi	r24, 0x1F	; 31
  c6:	9e e4       	ldi	r25, 0x4E	; 78
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <UDS_Receive+0x24>
  cc:	00 c0       	rjmp	.+0      	; 0xce <UDS_Receive+0x2a>
  ce:	00 00       	nop
	 LCD_Init();
 }

 void UDS_Receive(u8 * arr){
	 u8 i = 0;
	 for (i=0;; i++)
  d0:	cf 5f       	subi	r28, 0xFF	; 255
		 if (arr[i]==' ')
		 {
			 break;
		 }
		 _delay_ms(10);
	 }
  d2:	ef cf       	rjmp	.-34     	; 0xb2 <UDS_Receive+0xe>
	 arr[i] = '\0';
  d4:	f8 01       	movw	r30, r16
  d6:	10 82       	st	Z, r1
 }
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	ff 90       	pop	r15
  e0:	ef 90       	pop	r14
  e2:	08 95       	ret

000000e4 <UDS_Transmit>:
 void UDS_Transmit(u8 * arr){
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	8c 01       	movw	r16, r24
	 u8 i =0 ;
	 for(i = 0 ; i <10 ; i++){
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	09 c0       	rjmp	.+18     	; 0x102 <UDS_Transmit+0x1e>
		 if (arr[i]=='\n')
  f0:	f8 01       	movw	r30, r16
  f2:	ec 0f       	add	r30, r28
  f4:	f1 1d       	adc	r31, r1
  f6:	80 81       	ld	r24, Z
  f8:	8a 30       	cpi	r24, 0x0A	; 10
  fa:	29 f0       	breq	.+10     	; 0x106 <UDS_Transmit+0x22>
		 {
			 break;
		 }
		 USART_Transmit(arr[i]);
  fc:	0e 94 c6 04 	call	0x98c	; 0x98c <USART_Transmit>
	 }
	 arr[i] = '\0';
 }
 void UDS_Transmit(u8 * arr){
	 u8 i =0 ;
	 for(i = 0 ; i <10 ; i++){
 100:	cf 5f       	subi	r28, 0xFF	; 255
 102:	ca 30       	cpi	r28, 0x0A	; 10
 104:	a8 f3       	brcs	.-22     	; 0xf0 <UDS_Transmit+0xc>
		 {
			 break;
		 }
		 USART_Transmit(arr[i]);
	 }	 
 }
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <UDS>:
 
void UDS(void){
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
	switch(Current){
 116:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__data_end>
 11a:	88 23       	and	r24, r24
 11c:	21 f0       	breq	.+8      	; 0x126 <UDS+0x18>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	09 f4       	brne	.+2      	; 0x124 <UDS+0x16>
 122:	03 c1       	rjmp	.+518    	; 0x32a <UDS+0x21c>
 124:	29 c1       	rjmp	.+594    	; 0x378 <UDS+0x26a>
		
		case Unsecure_state:
		LCD_Clear();
 126:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_Clear>
		LCD_GoTo(0, 0);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_GoTo>
		LCD_SendString("Get Key: ");
 132:	84 e6       	ldi	r24, 0x64	; 100
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_SendString>
		
		
		UDS_Receive(input_arr);
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 52 00 	call	0xa4	; 0xa4 <UDS_Receive>
		if(!(strcmp(input_arr,"3101AA00")))
 142:	6e e6       	ldi	r22, 0x6E	; 110
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	8d e0       	ldi	r24, 0x0D	; 13
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 e5 05 	call	0xbca	; 0xbca <strcmp>
 14e:	89 2b       	or	r24, r25
 150:	79 f4       	brne	.+30     	; 0x170 <UDS+0x62>
		{   
			
			LCD_Clear();
 152:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_Clear>
			LCD_GoTo(1,1);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_GoTo>
			LCD_SendString("NRC 7F 31 33");
 15e:	87 e7       	ldi	r24, 0x77	; 119
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_SendString>
			UDS_Transmit("NRC7F3133");
 166:	84 e8       	ldi	r24, 0x84	; 132
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 72 00 	call	0xe4	; 0xe4 <UDS_Transmit>
 16e:	04 c1       	rjmp	.+520    	; 0x378 <UDS+0x26a>
		}
		//UDS_Receive(input_arr);
		else if(!strcmp(input_arr,"2701")){			
 170:	6e e8       	ldi	r22, 0x8E	; 142
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	8d e0       	ldi	r24, 0x0D	; 13
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 e5 05 	call	0xbca	; 0xbca <strcmp>
 17c:	89 2b       	or	r24, r25
 17e:	09 f0       	breq	.+2      	; 0x182 <UDS+0x74>
 180:	bc c0       	rjmp	.+376    	; 0x2fa <UDS+0x1ec>
		LCD_Clear();
 182:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_Clear>
		LCD_GoTo(1, 1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_GoTo>
		LCD_SendString("67 01 ");
 18e:	83 e9       	ldi	r24, 0x93	; 147
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_SendString>
		UDS_Transmit("6701");
 196:	8a e9       	ldi	r24, 0x9A	; 154
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 72 00 	call	0xe4	; 0xe4 <UDS_Transmit>

		for(u8 i=0;i<8;i++)
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	0e c0       	rjmp	.+28     	; 0x1be <UDS+0xb0>
		{
			ran_arr[i]=(rand()%10);
 1a2:	0c 2f       	mov	r16, r28
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <rand>
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 20 05 	call	0xa40	; 0xa40 <__divmodhi4>
 1b2:	f8 01       	movw	r30, r16
 1b4:	ec 5f       	subi	r30, 0xFC	; 252
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
			ran_arr[i]+=48;
 1b8:	80 5d       	subi	r24, 0xD0	; 208
 1ba:	80 83       	st	Z, r24
		LCD_Clear();
		LCD_GoTo(1, 1);
		LCD_SendString("67 01 ");
		UDS_Transmit("6701");

		for(u8 i=0;i<8;i++)
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	c8 30       	cpi	r28, 0x08	; 8
 1c0:	80 f3       	brcs	.-32     	; 0x1a2 <UDS+0x94>
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <UDS+0xce>
			ran_arr[i]=(rand()%10);
			ran_arr[i]+=48;
		}
		for(u8 i=0;i<8;i++)
		{
			LCD_SendChar(ran_arr[i]);
 1c6:	c1 2f       	mov	r28, r17
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	cc 5f       	subi	r28, 0xFC	; 252
 1cc:	de 4f       	sbci	r29, 0xFE	; 254
 1ce:	88 81       	ld	r24, Y
 1d0:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_SendChar>
			USART_Transmit(ran_arr[i]);
 1d4:	88 81       	ld	r24, Y
 1d6:	0e 94 c6 04 	call	0x98c	; 0x98c <USART_Transmit>
		for(u8 i=0;i<8;i++)
		{
			ran_arr[i]=(rand()%10);
			ran_arr[i]+=48;
		}
		for(u8 i=0;i<8;i++)
 1da:	1f 5f       	subi	r17, 0xFF	; 255
 1dc:	18 30       	cpi	r17, 0x08	; 8
 1de:	98 f3       	brcs	.-26     	; 0x1c6 <UDS+0xb8>
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	19 c0       	rjmp	.+50     	; 0x216 <UDS+0x108>
			LCD_SendChar(ran_arr[i]);
			USART_Transmit(ran_arr[i]);
		}
		for(u8 i=0;i<8;i++)
		{
			enc_arr[i] =encryptMessage(ran_arr[i]);
 1e4:	c0 2f       	mov	r28, r16
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	fe 01       	movw	r30, r28
 1ea:	ec 5f       	subi	r30, 0xFC	; 252
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	10 81       	ld	r17, Z
 1f0:	81 2f       	mov	r24, r17
 1f2:	0e 94 49 00 	call	0x92	; 0x92 <encryptMessage>
 1f6:	fe 01       	movw	r30, r28
 1f8:	e5 50       	subi	r30, 0x05	; 5
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	80 83       	st	Z, r24
			if (ran_arr[i]=='0')
 1fe:	10 33       	cpi	r17, 0x30	; 48
 200:	29 f4       	brne	.+10     	; 0x20c <UDS+0xfe>
			{
				ran_arr[i]='9';
 202:	cc 5f       	subi	r28, 0xFC	; 252
 204:	de 4f       	sbci	r29, 0xFE	; 254
 206:	89 e3       	ldi	r24, 0x39	; 57
 208:	88 83       	st	Y, r24
				continue;
 20a:	04 c0       	rjmp	.+8      	; 0x214 <UDS+0x106>
			}
			ran_arr[i]--;
 20c:	cc 5f       	subi	r28, 0xFC	; 252
 20e:	de 4f       	sbci	r29, 0xFE	; 254
 210:	11 50       	subi	r17, 0x01	; 1
 212:	18 83       	st	Y, r17
		for(u8 i=0;i<8;i++)
		{
			LCD_SendChar(ran_arr[i]);
			USART_Transmit(ran_arr[i]);
		}
		for(u8 i=0;i<8;i++)
 214:	0f 5f       	subi	r16, 0xFF	; 255
 216:	08 30       	cpi	r16, 0x08	; 8
 218:	28 f3       	brcs	.-54     	; 0x1e4 <UDS+0xd6>
				ran_arr[i]='9';
				continue;
			}
			ran_arr[i]--;
		}
		ran_arr[8]='\0';
 21a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ran_arr+0x8>

		for(u8 i=0;i<8;i++)
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	06 c0       	rjmp	.+12     	; 0x22e <UDS+0x120>
		{
			input_arr[i]=0;
 222:	e8 2f       	mov	r30, r24
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	e3 5f       	subi	r30, 0xF3	; 243
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	10 82       	st	Z, r1
			}
			ran_arr[i]--;
		}
		ran_arr[8]='\0';

		for(u8 i=0;i<8;i++)
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	88 30       	cpi	r24, 0x08	; 8
 230:	c0 f3       	brcs	.-16     	; 0x222 <UDS+0x114>
		{
			input_arr[i]=0;
		}
		//UDS_Receive(req_arr);
		UDS_Receive(input_arr);
 232:	8d e0       	ldi	r24, 0x0D	; 13
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 52 00 	call	0xa4	; 0xa4 <UDS_Receive>
		if(!strcmp(input_arr,"2702"))
 23a:	6f e9       	ldi	r22, 0x9F	; 159
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	8d e0       	ldi	r24, 0x0D	; 13
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 e5 05 	call	0xbca	; 0xbca <strcmp>
 246:	89 2b       	or	r24, r25
 248:	09 f0       	breq	.+2      	; 0x24c <UDS+0x13e>
 24a:	3f c0       	rjmp	.+126    	; 0x2ca <UDS+0x1bc>
		{
		UDS_Receive(input_arr);
 24c:	8d e0       	ldi	r24, 0x0D	; 13
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 52 00 	call	0xa4	; 0xa4 <UDS_Receive>
		if(!strcmp(input_arr,ran_arr))
 254:	64 e0       	ldi	r22, 0x04	; 4
 256:	71 e0       	ldi	r23, 0x01	; 1
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 e5 05 	call	0xbca	; 0xbca <strcmp>
 260:	89 2b       	or	r24, r25
 262:	d9 f4       	brne	.+54     	; 0x29a <UDS+0x18c>
		{
			Current=Secure_state;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
			LCD_Clear();
 26a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_Clear>
			LCD_GoTo(1,1);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_GoTo>
			LCD_SendString("67 02 ");
 276:	84 ea       	ldi	r24, 0xA4	; 164
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_SendString>
			UDS_Transmit("6702");
 27e:	8b ea       	ldi	r24, 0xAB	; 171
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 72 00 	call	0xe4	; 0xe4 <UDS_Transmit>
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	8e e9       	ldi	r24, 0x9E	; 158
 28a:	94 e2       	ldi	r25, 0x24	; 36
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <UDS+0x17e>
 294:	00 c0       	rjmp	.+0      	; 0x296 <UDS+0x188>
 296:	00 00       	nop
 298:	6f c0       	rjmp	.+222    	; 0x378 <UDS+0x26a>
			_delay_ms(1500);
		}
		else
		{
			
			LCD_Clear();
 29a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_Clear>
			LCD_GoTo(1,1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_GoTo>
			LCD_SendString("7F 27 35");
 2a6:	80 eb       	ldi	r24, 0xB0	; 176
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_SendString>
			UDS_Transmit("7F2735");
 2ae:	89 eb       	ldi	r24, 0xB9	; 185
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 72 00 	call	0xe4	; 0xe4 <UDS_Transmit>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	8e e9       	ldi	r24, 0x9E	; 158
 2ba:	94 e2       	ldi	r25, 0x24	; 36
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <UDS+0x1ae>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <UDS+0x1b8>
 2c6:	00 00       	nop
 2c8:	57 c0       	rjmp	.+174    	; 0x378 <UDS+0x26a>
		}
		}
		else
		{
			
			LCD_Clear();
 2ca:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_Clear>
			LCD_GoTo(1,1);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_GoTo>
			LCD_SendString("7F 27 35");
 2d6:	80 eb       	ldi	r24, 0xB0	; 176
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_SendString>
			UDS_Transmit("7F2735");
 2de:	89 eb       	ldi	r24, 0xB9	; 185
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 72 00 	call	0xe4	; 0xe4 <UDS_Transmit>
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	8e e9       	ldi	r24, 0x9E	; 158
 2ea:	94 e2       	ldi	r25, 0x24	; 36
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <UDS+0x1de>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <UDS+0x1e8>
 2f6:	00 00       	nop
 2f8:	3f c0       	rjmp	.+126    	; 0x378 <UDS+0x26a>
			_delay_ms(1500);
		}

	}
	else{
		LCD_Clear();
 2fa:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_Clear>
		LCD_GoTo(1,1);
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_GoTo>
		LCD_SendString("7F 27 35");
 306:	80 eb       	ldi	r24, 0xB0	; 176
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_SendString>
		UDS_Transmit("7F2735");
 30e:	89 eb       	ldi	r24, 0xB9	; 185
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 72 00 	call	0xe4	; 0xe4 <UDS_Transmit>
 316:	2f ef       	ldi	r18, 0xFF	; 255
 318:	8e e9       	ldi	r24, 0x9E	; 158
 31a:	94 e2       	ldi	r25, 0x24	; 36
 31c:	21 50       	subi	r18, 0x01	; 1
 31e:	80 40       	sbci	r24, 0x00	; 0
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <UDS+0x20e>
 324:	00 c0       	rjmp	.+0      	; 0x326 <UDS+0x218>
 326:	00 00       	nop
 328:	27 c0       	rjmp	.+78     	; 0x378 <UDS+0x26a>
		
		break;
		
		
		case Secure_state:
		UDS_Receive(input_arr);
 32a:	8d e0       	ldi	r24, 0x0D	; 13
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 52 00 	call	0xa4	; 0xa4 <UDS_Receive>
		if(!(strcmp(input_arr,"3101AA00")))
 332:	6e e6       	ldi	r22, 0x6E	; 110
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	8d e0       	ldi	r24, 0x0D	; 13
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	0e 94 e5 05 	call	0xbca	; 0xbca <strcmp>
 33e:	89 2b       	or	r24, r25
 340:	99 f4       	brne	.+38     	; 0x368 <UDS+0x25a>
		{
			
			LCD_Clear();
 342:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_Clear>
			LCD_GoTo(1,1);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_GoTo>
			LCD_SendString("71 01 AA 00");
 34e:	80 ec       	ldi	r24, 0xC0	; 192
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_SendString>
			UDS_Transmit("7101AA00");
 356:	8c ec       	ldi	r24, 0xCC	; 204
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 72 00 	call	0xe4	; 0xe4 <UDS_Transmit>
			setpinvalue(PINA5, HIGH);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 366:	08 c0       	rjmp	.+16     	; 0x378 <UDS+0x26a>
		}
		else
		{
			LCD_SendString("NRC 7F 31 33");
 368:	87 e7       	ldi	r24, 0x77	; 119
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_SendString>
			UDS_Transmit("NRC7F3133");
 370:	84 e8       	ldi	r24, 0x84	; 132
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 72 00 	call	0xe4	; 0xe4 <UDS_Transmit>
		}
		break;
		
	
}
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <LCD_SendCommand>:
	LCD_SendCommand(0x40+(address*8));
	for(i=0;i<8;i++){
		LCD_SendData(pattern[i]);
	}
	LCD_SendCommand(0x80);
}
 382:	cf 93       	push	r28
 384:	c8 2f       	mov	r28, r24
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	83 e0       	ldi	r24, 0x03	; 3
 38a:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 38e:	c4 fb       	bst	r28, 4
 390:	66 27       	eor	r22, r22
 392:	60 f9       	bld	r22, 0
 394:	88 e0       	ldi	r24, 0x08	; 8
 396:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 39a:	c5 fb       	bst	r28, 5
 39c:	66 27       	eor	r22, r22
 39e:	60 f9       	bld	r22, 0
 3a0:	89 e0       	ldi	r24, 0x09	; 9
 3a2:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 3a6:	c6 fb       	bst	r28, 6
 3a8:	66 27       	eor	r22, r22
 3aa:	60 f9       	bld	r22, 0
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 3b2:	6c 2f       	mov	r22, r28
 3b4:	66 1f       	adc	r22, r22
 3b6:	66 27       	eor	r22, r22
 3b8:	66 1f       	adc	r22, r22
 3ba:	8c e0       	ldi	r24, 0x0C	; 12
 3bc:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 3c8:	8f ec       	ldi	r24, 0xCF	; 207
 3ca:	97 e0       	ldi	r25, 0x07	; 7
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCD_SendCommand+0x4a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCD_SendCommand+0x50>
 3d2:	00 00       	nop
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 3dc:	8f ec       	ldi	r24, 0xCF	; 207
 3de:	97 e0       	ldi	r25, 0x07	; 7
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_SendCommand+0x5e>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_SendCommand+0x64>
 3e6:	00 00       	nop
 3e8:	6c 2f       	mov	r22, r28
 3ea:	61 70       	andi	r22, 0x01	; 1
 3ec:	88 e0       	ldi	r24, 0x08	; 8
 3ee:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 3f2:	c1 fb       	bst	r28, 1
 3f4:	66 27       	eor	r22, r22
 3f6:	60 f9       	bld	r22, 0
 3f8:	89 e0       	ldi	r24, 0x09	; 9
 3fa:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 3fe:	c2 fb       	bst	r28, 2
 400:	66 27       	eor	r22, r22
 402:	60 f9       	bld	r22, 0
 404:	8a e0       	ldi	r24, 0x0A	; 10
 406:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 40a:	c3 fb       	bst	r28, 3
 40c:	66 27       	eor	r22, r22
 40e:	60 f9       	bld	r22, 0
 410:	8c e0       	ldi	r24, 0x0C	; 12
 412:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 41e:	8f ec       	ldi	r24, 0xCF	; 207
 420:	97 e0       	ldi	r25, 0x07	; 7
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 432:	8f ec       	ldi	r24, 0xCF	; 207
 434:	97 e0       	ldi	r25, 0x07	; 7
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <LCD_SendData>:
 442:	cf 93       	push	r28
 444:	c8 2f       	mov	r28, r24
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 44e:	c4 fb       	bst	r28, 4
 450:	66 27       	eor	r22, r22
 452:	60 f9       	bld	r22, 0
 454:	88 e0       	ldi	r24, 0x08	; 8
 456:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 45a:	c5 fb       	bst	r28, 5
 45c:	66 27       	eor	r22, r22
 45e:	60 f9       	bld	r22, 0
 460:	89 e0       	ldi	r24, 0x09	; 9
 462:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 466:	c6 fb       	bst	r28, 6
 468:	66 27       	eor	r22, r22
 46a:	60 f9       	bld	r22, 0
 46c:	8a e0       	ldi	r24, 0x0A	; 10
 46e:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 472:	6c 2f       	mov	r22, r28
 474:	66 1f       	adc	r22, r22
 476:	66 27       	eor	r22, r22
 478:	66 1f       	adc	r22, r22
 47a:	8c e0       	ldi	r24, 0x0C	; 12
 47c:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 488:	8f ec       	ldi	r24, 0xCF	; 207
 48a:	97 e0       	ldi	r25, 0x07	; 7
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <LCD_SendData+0x4a>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_SendData+0x50>
 492:	00 00       	nop
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 49c:	8f ec       	ldi	r24, 0xCF	; 207
 49e:	97 e0       	ldi	r25, 0x07	; 7
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCD_SendData+0x5e>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCD_SendData+0x64>
 4a6:	00 00       	nop
 4a8:	6c 2f       	mov	r22, r28
 4aa:	61 70       	andi	r22, 0x01	; 1
 4ac:	88 e0       	ldi	r24, 0x08	; 8
 4ae:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 4b2:	c1 fb       	bst	r28, 1
 4b4:	66 27       	eor	r22, r22
 4b6:	60 f9       	bld	r22, 0
 4b8:	89 e0       	ldi	r24, 0x09	; 9
 4ba:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 4be:	c2 fb       	bst	r28, 2
 4c0:	66 27       	eor	r22, r22
 4c2:	60 f9       	bld	r22, 0
 4c4:	8a e0       	ldi	r24, 0x0A	; 10
 4c6:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 4ca:	c3 fb       	bst	r28, 3
 4cc:	66 27       	eor	r22, r22
 4ce:	60 f9       	bld	r22, 0
 4d0:	8c e0       	ldi	r24, 0x0C	; 12
 4d2:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 4de:	8f ec       	ldi	r24, 0xCF	; 207
 4e0:	97 e0       	ldi	r25, 0x07	; 7
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <LCD_SendData+0xa0>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <LCD_SendData+0xa6>
 4e8:	00 00       	nop
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	0e 94 0c 04 	call	0x818	; 0x818 <setpinvalue>
 4f2:	8f ec       	ldi	r24, 0xCF	; 207
 4f4:	97 e0       	ldi	r25, 0x07	; 7
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <LCD_SendData+0xb4>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <LCD_SendData+0xba>
 4fc:	00 00       	nop
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <LCD_Init>:
 502:	8f e2       	ldi	r24, 0x2F	; 47
 504:	95 e7       	ldi	r25, 0x75	; 117
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <LCD_Init+0x4>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <LCD_Init+0xa>
 50c:	00 00       	nop
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_SendCommand>
 514:	8f e9       	ldi	r24, 0x9F	; 159
 516:	9f e0       	ldi	r25, 0x0F	; 15
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_Init+0x16>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_Init+0x1c>
 51e:	00 00       	nop
 520:	88 e2       	ldi	r24, 0x28	; 40
 522:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_SendCommand>
 526:	8f e9       	ldi	r24, 0x9F	; 159
 528:	9f e0       	ldi	r25, 0x0F	; 15
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_Init+0x28>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <LCD_Init+0x2e>
 530:	00 00       	nop
 532:	8c e0       	ldi	r24, 0x0C	; 12
 534:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_SendCommand>
 538:	86 e0       	ldi	r24, 0x06	; 6
 53a:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_SendCommand>
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_SendCommand>
 544:	8f e9       	ldi	r24, 0x9F	; 159
 546:	9f e0       	ldi	r25, 0x0F	; 15
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_Init+0x46>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_Init+0x4c>
 54e:	00 00       	nop
 550:	08 95       	ret

00000552 <LCD_SendChar>:
 552:	0e 94 21 02 	call	0x442	; 0x442 <LCD_SendData>
 556:	08 95       	ret

00000558 <LCD_SendString>:
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	8c 01       	movw	r16, r24
 560:	c0 e0       	ldi	r28, 0x00	; 0
 562:	03 c0       	rjmp	.+6      	; 0x56a <LCD_SendString+0x12>
 564:	0e 94 21 02 	call	0x442	; 0x442 <LCD_SendData>
 568:	cf 5f       	subi	r28, 0xFF	; 255
 56a:	f8 01       	movw	r30, r16
 56c:	ec 0f       	add	r30, r28
 56e:	f1 1d       	adc	r31, r1
 570:	80 81       	ld	r24, Z
 572:	81 11       	cpse	r24, r1
 574:	f7 cf       	rjmp	.-18     	; 0x564 <LCD_SendString+0xc>
 576:	8f e1       	ldi	r24, 0x1F	; 31
 578:	9e e4       	ldi	r25, 0x4E	; 78
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <LCD_SendString+0x22>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <LCD_SendString+0x28>
 580:	00 00       	nop
 582:	cf 91       	pop	r28
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	08 95       	ret

0000058a <LCD_GoTo>:
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	39 f0       	breq	.+14     	; 0x59c <LCD_GoTo+0x12>
 58e:	58 f0       	brcs	.+22     	; 0x5a6 <LCD_GoTo+0x1c>
 590:	82 30       	cpi	r24, 0x02	; 2
 592:	31 f0       	breq	.+12     	; 0x5a0 <LCD_GoTo+0x16>
 594:	83 30       	cpi	r24, 0x03	; 3
 596:	31 f0       	breq	.+12     	; 0x5a4 <LCD_GoTo+0x1a>
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <LCD_GoTo+0x1c>
 59c:	60 5c       	subi	r22, 0xC0	; 192
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <LCD_GoTo+0x1c>
 5a0:	6c 5e       	subi	r22, 0xEC	; 236
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <LCD_GoTo+0x1c>
 5a4:	6c 5a       	subi	r22, 0xAC	; 172
 5a6:	86 2f       	mov	r24, r22
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_SendCommand>
 5ae:	08 95       	ret

000005b0 <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_SendCommand(0x01);
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_SendCommand>
 5b6:	08 95       	ret

000005b8 <main>:
//void UART_receiveString(u8 *Str);
//void Have_Security();
int main(void)
{
	
	UDS_Init();
 5b8:	0e 94 4b 00 	call	0x96	; 0x96 <UDS_Init>
	
	while(1)
	{
		UDS();
 5bc:	0e 94 87 00 	call	0x10e	; 0x10e <UDS>
 5c0:	fd cf       	rjmp	.-6      	; 0x5bc <main+0x4>

000005c2 <SETPINDirection>:
}


static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
 5c2:	98 2f       	mov	r25, r24
 5c4:	96 95       	lsr	r25
 5c6:	96 95       	lsr	r25
 5c8:	96 95       	lsr	r25
	u8 BIT=PIN%8;
 5ca:	87 70       	andi	r24, 0x07	; 7
	ERROR_status loc_variable = E_OK;
	if(PORT>=PA && PORT <=PD)
 5cc:	94 30       	cpi	r25, 0x04	; 4
 5ce:	08 f0       	brcs	.+2      	; 0x5d2 <SETPINDirection+0x10>
 5d0:	07 c1       	rjmp	.+526    	; 0x7e0 <SETPINDirection+0x21e>
	{
		switch(PORT){
 5d2:	91 30       	cpi	r25, 0x01	; 1
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <SETPINDirection+0x16>
 5d6:	47 c0       	rjmp	.+142    	; 0x666 <SETPINDirection+0xa4>
 5d8:	38 f0       	brcs	.+14     	; 0x5e8 <SETPINDirection+0x26>
 5da:	92 30       	cpi	r25, 0x02	; 2
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <SETPINDirection+0x1e>
 5de:	82 c0       	rjmp	.+260    	; 0x6e4 <SETPINDirection+0x122>
 5e0:	93 30       	cpi	r25, 0x03	; 3
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <SETPINDirection+0x24>
 5e4:	be c0       	rjmp	.+380    	; 0x762 <SETPINDirection+0x1a0>
 5e6:	fe c0       	rjmp	.+508    	; 0x7e4 <SETPINDirection+0x222>
			
			case PA:
			switch(STATE)
 5e8:	61 30       	cpi	r22, 0x01	; 1
 5ea:	b9 f0       	breq	.+46     	; 0x61a <SETPINDirection+0x58>
 5ec:	18 f0       	brcs	.+6      	; 0x5f4 <SETPINDirection+0x32>
 5ee:	62 30       	cpi	r22, 0x02	; 2
 5f0:	39 f1       	breq	.+78     	; 0x640 <SETPINDirection+0x7e>
 5f2:	fa c0       	rjmp	.+500    	; 0x7e8 <SETPINDirection+0x226>
			{
				case OUTPUT:
				SETBIT(DDRA,BIT);
 5f4:	4a b3       	in	r20, 0x1a	; 26
 5f6:	21 e0       	ldi	r18, 0x01	; 1
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	b9 01       	movw	r22, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <SETPINDirection+0x40>
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	8a 95       	dec	r24
 604:	e2 f7       	brpl	.-8      	; 0x5fe <SETPINDirection+0x3c>
 606:	cb 01       	movw	r24, r22
 608:	94 2f       	mov	r25, r20
 60a:	98 2b       	or	r25, r24
 60c:	9a bb       	out	0x1a, r25	; 26
				CLRBIT(PORTA,BIT);
 60e:	9b b3       	in	r25, 0x1b	; 27
 610:	80 95       	com	r24
 612:	89 23       	and	r24, r25
 614:	8b bb       	out	0x1b, r24	; 27

static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 616:	80 e0       	ldi	r24, 0x00	; 0
			switch(STATE)
			{
				case OUTPUT:
				SETBIT(DDRA,BIT);
				CLRBIT(PORTA,BIT);
				break;
 618:	08 95       	ret
				case INFREE:
				CLRBIT(DDRA,BIT);
 61a:	4a b3       	in	r20, 0x1a	; 26
 61c:	21 e0       	ldi	r18, 0x01	; 1
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	b9 01       	movw	r22, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <SETPINDirection+0x66>
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	8a 95       	dec	r24
 62a:	e2 f7       	brpl	.-8      	; 0x624 <SETPINDirection+0x62>
 62c:	cb 01       	movw	r24, r22
 62e:	80 95       	com	r24
 630:	94 2f       	mov	r25, r20
 632:	98 23       	and	r25, r24
 634:	9a bb       	out	0x1a, r25	; 26
				CLRBIT(PORTA,BIT);
 636:	9b b3       	in	r25, 0x1b	; 27
 638:	89 23       	and	r24, r25
 63a:	8b bb       	out	0x1b, r24	; 27

static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 63c:	80 e0       	ldi	r24, 0x00	; 0
				CLRBIT(PORTA,BIT);
				break;
				case INFREE:
				CLRBIT(DDRA,BIT);
				CLRBIT(PORTA,BIT);
				break;
 63e:	08 95       	ret
				case INPULL:
				CLRBIT(DDRA,BIT);
 640:	4a b3       	in	r20, 0x1a	; 26
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	b9 01       	movw	r22, r18
 648:	02 c0       	rjmp	.+4      	; 0x64e <SETPINDirection+0x8c>
 64a:	66 0f       	add	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	8a 95       	dec	r24
 650:	e2 f7       	brpl	.-8      	; 0x64a <SETPINDirection+0x88>
 652:	cb 01       	movw	r24, r22
 654:	96 2f       	mov	r25, r22
 656:	90 95       	com	r25
 658:	94 23       	and	r25, r20
 65a:	9a bb       	out	0x1a, r25	; 26
				SETBIT(PORTA,BIT);
 65c:	9b b3       	in	r25, 0x1b	; 27
 65e:	89 2b       	or	r24, r25
 660:	8b bb       	out	0x1b, r24	; 27

static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 662:	80 e0       	ldi	r24, 0x00	; 0
				CLRBIT(PORTA,BIT);
				break;
				case INPULL:
				CLRBIT(DDRA,BIT);
				SETBIT(PORTA,BIT);
				break;
 664:	08 95       	ret
				default: loc_variable = E_NOK;
			}
			break;
			
			case PB:
			switch(STATE)
 666:	61 30       	cpi	r22, 0x01	; 1
 668:	b9 f0       	breq	.+46     	; 0x698 <SETPINDirection+0xd6>
 66a:	18 f0       	brcs	.+6      	; 0x672 <SETPINDirection+0xb0>
 66c:	62 30       	cpi	r22, 0x02	; 2
 66e:	39 f1       	breq	.+78     	; 0x6be <SETPINDirection+0xfc>
 670:	bd c0       	rjmp	.+378    	; 0x7ec <SETPINDirection+0x22a>
			{
				case OUTPUT:
				SETBIT(DDRB,BIT);
 672:	47 b3       	in	r20, 0x17	; 23
 674:	21 e0       	ldi	r18, 0x01	; 1
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	b9 01       	movw	r22, r18
 67a:	02 c0       	rjmp	.+4      	; 0x680 <SETPINDirection+0xbe>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	8a 95       	dec	r24
 682:	e2 f7       	brpl	.-8      	; 0x67c <SETPINDirection+0xba>
 684:	cb 01       	movw	r24, r22
 686:	94 2f       	mov	r25, r20
 688:	98 2b       	or	r25, r24
 68a:	97 bb       	out	0x17, r25	; 23
				CLRBIT(PORTB,BIT);
 68c:	98 b3       	in	r25, 0x18	; 24
 68e:	80 95       	com	r24
 690:	89 23       	and	r24, r25
 692:	88 bb       	out	0x18, r24	; 24

static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 694:	80 e0       	ldi	r24, 0x00	; 0
			switch(STATE)
			{
				case OUTPUT:
				SETBIT(DDRB,BIT);
				CLRBIT(PORTB,BIT);
				break;
 696:	08 95       	ret
				case INFREE:
				CLRBIT(DDRB,BIT);
 698:	47 b3       	in	r20, 0x17	; 23
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	b9 01       	movw	r22, r18
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <SETPINDirection+0xe4>
 6a2:	66 0f       	add	r22, r22
 6a4:	77 1f       	adc	r23, r23
 6a6:	8a 95       	dec	r24
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <SETPINDirection+0xe0>
 6aa:	cb 01       	movw	r24, r22
 6ac:	80 95       	com	r24
 6ae:	94 2f       	mov	r25, r20
 6b0:	98 23       	and	r25, r24
 6b2:	97 bb       	out	0x17, r25	; 23
				CLRBIT(PORTB,BIT);
 6b4:	98 b3       	in	r25, 0x18	; 24
 6b6:	89 23       	and	r24, r25
 6b8:	88 bb       	out	0x18, r24	; 24

static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
				CLRBIT(PORTB,BIT);
				break;
				case INFREE:
				CLRBIT(DDRB,BIT);
				CLRBIT(PORTB,BIT);
				break;
 6bc:	08 95       	ret
				case INPULL:
				CLRBIT(DDRB,BIT);
 6be:	47 b3       	in	r20, 0x17	; 23
 6c0:	21 e0       	ldi	r18, 0x01	; 1
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	b9 01       	movw	r22, r18
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <SETPINDirection+0x10a>
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	8a 95       	dec	r24
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <SETPINDirection+0x106>
 6d0:	cb 01       	movw	r24, r22
 6d2:	96 2f       	mov	r25, r22
 6d4:	90 95       	com	r25
 6d6:	94 23       	and	r25, r20
 6d8:	97 bb       	out	0x17, r25	; 23
				SETBIT(PORTB,BIT);
 6da:	98 b3       	in	r25, 0x18	; 24
 6dc:	89 2b       	or	r24, r25
 6de:	88 bb       	out	0x18, r24	; 24
				default: loc_variable = E_NOK;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	08 95       	ret
			}
			break;
			case PC:
			switch(STATE)
 6e4:	61 30       	cpi	r22, 0x01	; 1
 6e6:	b9 f0       	breq	.+46     	; 0x716 <SETPINDirection+0x154>
 6e8:	18 f0       	brcs	.+6      	; 0x6f0 <SETPINDirection+0x12e>
 6ea:	62 30       	cpi	r22, 0x02	; 2
 6ec:	39 f1       	breq	.+78     	; 0x73c <SETPINDirection+0x17a>
 6ee:	80 c0       	rjmp	.+256    	; 0x7f0 <SETPINDirection+0x22e>
			{
				case OUTPUT:
				SETBIT(DDRC,BIT);
 6f0:	44 b3       	in	r20, 0x14	; 20
 6f2:	21 e0       	ldi	r18, 0x01	; 1
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	b9 01       	movw	r22, r18
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <SETPINDirection+0x13c>
 6fa:	66 0f       	add	r22, r22
 6fc:	77 1f       	adc	r23, r23
 6fe:	8a 95       	dec	r24
 700:	e2 f7       	brpl	.-8      	; 0x6fa <SETPINDirection+0x138>
 702:	cb 01       	movw	r24, r22
 704:	94 2f       	mov	r25, r20
 706:	98 2b       	or	r25, r24
 708:	94 bb       	out	0x14, r25	; 20
				CLRBIT(PORTC,BIT);
 70a:	95 b3       	in	r25, 0x15	; 21
 70c:	80 95       	com	r24
 70e:	89 23       	and	r24, r25
 710:	85 bb       	out	0x15, r24	; 21

static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 712:	80 e0       	ldi	r24, 0x00	; 0
			switch(STATE)
			{
				case OUTPUT:
				SETBIT(DDRC,BIT);
				CLRBIT(PORTC,BIT);
				break;
 714:	08 95       	ret
				case INFREE:
				CLRBIT(DDRC,BIT);
 716:	44 b3       	in	r20, 0x14	; 20
 718:	21 e0       	ldi	r18, 0x01	; 1
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	b9 01       	movw	r22, r18
 71e:	02 c0       	rjmp	.+4      	; 0x724 <SETPINDirection+0x162>
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	8a 95       	dec	r24
 726:	e2 f7       	brpl	.-8      	; 0x720 <SETPINDirection+0x15e>
 728:	cb 01       	movw	r24, r22
 72a:	80 95       	com	r24
 72c:	94 2f       	mov	r25, r20
 72e:	98 23       	and	r25, r24
 730:	94 bb       	out	0x14, r25	; 20
				CLRBIT(PORTC,BIT);
 732:	95 b3       	in	r25, 0x15	; 21
 734:	89 23       	and	r24, r25
 736:	85 bb       	out	0x15, r24	; 21

static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 738:	80 e0       	ldi	r24, 0x00	; 0
				CLRBIT(PORTC,BIT);
				break;
				case INFREE:
				CLRBIT(DDRC,BIT);
				CLRBIT(PORTC,BIT);
				break;
 73a:	08 95       	ret
				case INPULL:
				CLRBIT(DDRC,BIT);
 73c:	44 b3       	in	r20, 0x14	; 20
 73e:	21 e0       	ldi	r18, 0x01	; 1
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	b9 01       	movw	r22, r18
 744:	02 c0       	rjmp	.+4      	; 0x74a <SETPINDirection+0x188>
 746:	66 0f       	add	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	8a 95       	dec	r24
 74c:	e2 f7       	brpl	.-8      	; 0x746 <SETPINDirection+0x184>
 74e:	cb 01       	movw	r24, r22
 750:	96 2f       	mov	r25, r22
 752:	90 95       	com	r25
 754:	94 23       	and	r25, r20
 756:	94 bb       	out	0x14, r25	; 20
				SETBIT(PORTC,BIT);
 758:	95 b3       	in	r25, 0x15	; 21
 75a:	89 2b       	or	r24, r25
 75c:	85 bb       	out	0x15, r24	; 21
				default: loc_variable = E_NOK;
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	08 95       	ret
			}
			break;
			case PD:
			switch(STATE)
 762:	61 30       	cpi	r22, 0x01	; 1
 764:	b9 f0       	breq	.+46     	; 0x794 <SETPINDirection+0x1d2>
 766:	18 f0       	brcs	.+6      	; 0x76e <SETPINDirection+0x1ac>
 768:	62 30       	cpi	r22, 0x02	; 2
 76a:	39 f1       	breq	.+78     	; 0x7ba <SETPINDirection+0x1f8>
 76c:	43 c0       	rjmp	.+134    	; 0x7f4 <SETPINDirection+0x232>
			{
				case OUTPUT:
				SETBIT(DDRD,BIT);
 76e:	41 b3       	in	r20, 0x11	; 17
 770:	21 e0       	ldi	r18, 0x01	; 1
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	b9 01       	movw	r22, r18
 776:	02 c0       	rjmp	.+4      	; 0x77c <SETPINDirection+0x1ba>
 778:	66 0f       	add	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	8a 95       	dec	r24
 77e:	e2 f7       	brpl	.-8      	; 0x778 <SETPINDirection+0x1b6>
 780:	cb 01       	movw	r24, r22
 782:	94 2f       	mov	r25, r20
 784:	98 2b       	or	r25, r24
 786:	91 bb       	out	0x11, r25	; 17
				CLRBIT(PORTD,BIT);
 788:	92 b3       	in	r25, 0x12	; 18
 78a:	80 95       	com	r24
 78c:	89 23       	and	r24, r25
 78e:	82 bb       	out	0x12, r24	; 18

static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 790:	80 e0       	ldi	r24, 0x00	; 0
			switch(STATE)
			{
				case OUTPUT:
				SETBIT(DDRD,BIT);
				CLRBIT(PORTD,BIT);
				break;
 792:	08 95       	ret
				case INFREE:
				CLRBIT(DDRD,BIT);
 794:	41 b3       	in	r20, 0x11	; 17
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	b9 01       	movw	r22, r18
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <SETPINDirection+0x1e0>
 79e:	66 0f       	add	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	8a 95       	dec	r24
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <SETPINDirection+0x1dc>
 7a6:	cb 01       	movw	r24, r22
 7a8:	80 95       	com	r24
 7aa:	94 2f       	mov	r25, r20
 7ac:	98 23       	and	r25, r24
 7ae:	91 bb       	out	0x11, r25	; 17
				CLRBIT(PORTD,BIT);
 7b0:	92 b3       	in	r25, 0x12	; 18
 7b2:	89 23       	and	r24, r25
 7b4:	82 bb       	out	0x12, r24	; 18

static ERROR_status SETPINDirection(DIO_Pin_type PIN,PIN_Status_type STATE)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 7b6:	80 e0       	ldi	r24, 0x00	; 0
				CLRBIT(PORTD,BIT);
				break;
				case INFREE:
				CLRBIT(DDRD,BIT);
				CLRBIT(PORTD,BIT);
				break;
 7b8:	08 95       	ret
				case INPULL:
				CLRBIT(DDRD,BIT);
 7ba:	41 b3       	in	r20, 0x11	; 17
 7bc:	21 e0       	ldi	r18, 0x01	; 1
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	b9 01       	movw	r22, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <SETPINDirection+0x206>
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	8a 95       	dec	r24
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <SETPINDirection+0x202>
 7cc:	cb 01       	movw	r24, r22
 7ce:	96 2f       	mov	r25, r22
 7d0:	90 95       	com	r25
 7d2:	94 23       	and	r25, r20
 7d4:	91 bb       	out	0x11, r25	; 17
				SETBIT(PORTD,BIT);
 7d6:	92 b3       	in	r25, 0x12	; 18
 7d8:	89 2b       	or	r24, r25
 7da:	82 bb       	out	0x12, r24	; 18
				default: loc_variable = E_NOK;
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	08 95       	ret
			default : loc_variable = E_NOK;
		}
	}
	else
	{
		loc_variable = E_NOK;
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	08 95       	ret
				CLRBIT(DDRD,BIT);
				SETBIT(PORTD,BIT);
				default: loc_variable = E_NOK;
			}
			break;
			default : loc_variable = E_NOK;
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	08 95       	ret
				break;
				case INPULL:
				CLRBIT(DDRA,BIT);
				SETBIT(PORTA,BIT);
				break;
				default: loc_variable = E_NOK;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	08 95       	ret
				CLRBIT(PORTB,BIT);
				break;
				case INPULL:
				CLRBIT(DDRB,BIT);
				SETBIT(PORTB,BIT);
				default: loc_variable = E_NOK;
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	08 95       	ret
				CLRBIT(PORTC,BIT);
				break;
				case INPULL:
				CLRBIT(DDRC,BIT);
				SETBIT(PORTC,BIT);
				default: loc_variable = E_NOK;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	08 95       	ret
				CLRBIT(PORTD,BIT);
				break;
				case INPULL:
				CLRBIT(DDRD,BIT);
				SETBIT(PORTD,BIT);
				default: loc_variable = E_NOK;
 7f4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		loc_variable = E_NOK;
	}
	return loc_variable;
}
 7f6:	08 95       	ret

000007f8 <DIO_INIT>:
#include "DIO_Interface.h"
#include "DIO_CFG.h"
#include "DIO_Private.h"

void DIO_INIT(void)
{
 7f8:	cf 93       	push	r28
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 7fa:	c0 e0       	ldi	r28, 0x00	; 0
 7fc:	09 c0       	rjmp	.+18     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
	{
		SETPINDirection(i,Dio_PinsStatusArr[i]);
 7fe:	ec 2f       	mov	r30, r28
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	eb 52       	subi	r30, 0x2B	; 43
 804:	ff 4f       	sbci	r31, 0xFF	; 255
 806:	60 81       	ld	r22, Z
 808:	8c 2f       	mov	r24, r28
 80a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <SETPINDirection>
#include "DIO_Private.h"

void DIO_INIT(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 80e:	cf 5f       	subi	r28, 0xFF	; 255
 810:	c0 32       	cpi	r28, 0x20	; 32
 812:	a8 f3       	brcs	.-22     	; 0x7fe <DIO_INIT+0x6>
	{
		SETPINDirection(i,Dio_PinsStatusArr[i]);
	}
}
 814:	cf 91       	pop	r28
 816:	08 95       	ret

00000818 <setpinvalue>:
	return loc_variable;
}

ERROR_status setpinvalue(DIO_Pin_type PIN,PIN_Volt_status value)
{
	DIO_Port_type PORT=PIN/8;
 818:	98 2f       	mov	r25, r24
 81a:	96 95       	lsr	r25
 81c:	96 95       	lsr	r25
 81e:	96 95       	lsr	r25
	u8 BIT=PIN%8;
 820:	87 70       	andi	r24, 0x07	; 7
	ERROR_status loc_variable = E_OK;
	if(PORT>=PA && PORT <=PD)
 822:	94 30       	cpi	r25, 0x04	; 4
 824:	08 f0       	brcs	.+2      	; 0x828 <setpinvalue+0x10>
 826:	91 c0       	rjmp	.+290    	; 0x94a <__stack+0xeb>
	{
		switch(PORT){
 828:	91 30       	cpi	r25, 0x01	; 1
 82a:	51 f1       	breq	.+84     	; 0x880 <__stack+0x21>
 82c:	38 f0       	brcs	.+14     	; 0x83c <setpinvalue+0x24>
 82e:	92 30       	cpi	r25, 0x02	; 2
 830:	09 f4       	brne	.+2      	; 0x834 <setpinvalue+0x1c>
 832:	48 c0       	rjmp	.+144    	; 0x8c4 <__stack+0x65>
 834:	93 30       	cpi	r25, 0x03	; 3
 836:	09 f4       	brne	.+2      	; 0x83a <setpinvalue+0x22>
 838:	67 c0       	rjmp	.+206    	; 0x908 <__stack+0xa9>
 83a:	89 c0       	rjmp	.+274    	; 0x94e <__stack+0xef>
			
			case PA:
			switch(value)
 83c:	66 23       	and	r22, r22
 83e:	89 f0       	breq	.+34     	; 0x862 <__stack+0x3>
 840:	61 30       	cpi	r22, 0x01	; 1
 842:	09 f0       	breq	.+2      	; 0x846 <setpinvalue+0x2e>
 844:	86 c0       	rjmp	.+268    	; 0x952 <__stack+0xf3>
			{
				case HIGH:
				SETBIT(PORTA,BIT);
 846:	4b b3       	in	r20, 0x1b	; 27
 848:	21 e0       	ldi	r18, 0x01	; 1
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	b9 01       	movw	r22, r18
 84e:	02 c0       	rjmp	.+4      	; 0x854 <setpinvalue+0x3c>
 850:	66 0f       	add	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	8a 95       	dec	r24
 856:	e2 f7       	brpl	.-8      	; 0x850 <setpinvalue+0x38>
 858:	cb 01       	movw	r24, r22
 85a:	84 2b       	or	r24, r20
 85c:	8b bb       	out	0x1b, r24	; 27

ERROR_status setpinvalue(DIO_Pin_type PIN,PIN_Volt_status value)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 85e:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			switch(value)
			{
				case HIGH:
				SETBIT(PORTA,BIT);
				break;
 860:	08 95       	ret
				case LOW:
				CLRBIT(PORTA,BIT);
 862:	4b b3       	in	r20, 0x1b	; 27
 864:	21 e0       	ldi	r18, 0x01	; 1
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	b9 01       	movw	r22, r18
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	8a 95       	dec	r24
 872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
 874:	cb 01       	movw	r24, r22
 876:	80 95       	com	r24
 878:	84 23       	and	r24, r20
 87a:	8b bb       	out	0x1b, r24	; 27

ERROR_status setpinvalue(DIO_Pin_type PIN,PIN_Volt_status value)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 87c:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH:
				SETBIT(PORTA,BIT);
				break;
				case LOW:
				CLRBIT(PORTA,BIT);
				break;
 87e:	08 95       	ret
				default: loc_variable = E_NOK;
			}
			break;
			
			case PB:
			switch(value)
 880:	66 23       	and	r22, r22
 882:	89 f0       	breq	.+34     	; 0x8a6 <__stack+0x47>
 884:	61 30       	cpi	r22, 0x01	; 1
 886:	09 f0       	breq	.+2      	; 0x88a <__stack+0x2b>
 888:	66 c0       	rjmp	.+204    	; 0x956 <__stack+0xf7>
			{
				case HIGH:
				SETBIT(PORTB,BIT);
 88a:	48 b3       	in	r20, 0x18	; 24
 88c:	21 e0       	ldi	r18, 0x01	; 1
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	b9 01       	movw	r22, r18
 892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
 894:	66 0f       	add	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	8a 95       	dec	r24
 89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
 89c:	cb 01       	movw	r24, r22
 89e:	84 2b       	or	r24, r20
 8a0:	88 bb       	out	0x18, r24	; 24

ERROR_status setpinvalue(DIO_Pin_type PIN,PIN_Volt_status value)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 8a2:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			switch(value)
			{
				case HIGH:
				SETBIT(PORTB,BIT);
				break;
 8a4:	08 95       	ret
				case LOW:
				CLRBIT(PORTB,BIT);
 8a6:	48 b3       	in	r20, 0x18	; 24
 8a8:	21 e0       	ldi	r18, 0x01	; 1
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	b9 01       	movw	r22, r18
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
 8b0:	66 0f       	add	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	8a 95       	dec	r24
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
 8b8:	cb 01       	movw	r24, r22
 8ba:	80 95       	com	r24
 8bc:	84 23       	and	r24, r20
 8be:	88 bb       	out	0x18, r24	; 24

ERROR_status setpinvalue(DIO_Pin_type PIN,PIN_Volt_status value)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 8c0:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH:
				SETBIT(PORTB,BIT);
				break;
				case LOW:
				CLRBIT(PORTB,BIT);
				break;
 8c2:	08 95       	ret
				default: loc_variable = E_NOK;
			}
			break;
			case PC:
			switch(value)
 8c4:	66 23       	and	r22, r22
 8c6:	89 f0       	breq	.+34     	; 0x8ea <__stack+0x8b>
 8c8:	61 30       	cpi	r22, 0x01	; 1
 8ca:	09 f0       	breq	.+2      	; 0x8ce <__stack+0x6f>
 8cc:	46 c0       	rjmp	.+140    	; 0x95a <__stack+0xfb>
			{
				case HIGH:
				SETBIT(PORTC,BIT);
 8ce:	45 b3       	in	r20, 0x15	; 21
 8d0:	21 e0       	ldi	r18, 0x01	; 1
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	b9 01       	movw	r22, r18
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	8a 95       	dec	r24
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	cb 01       	movw	r24, r22
 8e2:	84 2b       	or	r24, r20
 8e4:	85 bb       	out	0x15, r24	; 21

ERROR_status setpinvalue(DIO_Pin_type PIN,PIN_Volt_status value)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 8e6:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			switch(value)
			{
				case HIGH:
				SETBIT(PORTC,BIT);
				break;
 8e8:	08 95       	ret
				case LOW:
				CLRBIT(PORTC,BIT);
 8ea:	45 b3       	in	r20, 0x15	; 21
 8ec:	21 e0       	ldi	r18, 0x01	; 1
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	b9 01       	movw	r22, r18
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__stack+0x99>
 8f4:	66 0f       	add	r22, r22
 8f6:	77 1f       	adc	r23, r23
 8f8:	8a 95       	dec	r24
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__stack+0x95>
 8fc:	cb 01       	movw	r24, r22
 8fe:	80 95       	com	r24
 900:	84 23       	and	r24, r20
 902:	85 bb       	out	0x15, r24	; 21

ERROR_status setpinvalue(DIO_Pin_type PIN,PIN_Volt_status value)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 904:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH:
				SETBIT(PORTC,BIT);
				break;
				case LOW:
				CLRBIT(PORTC,BIT);
				break;
 906:	08 95       	ret
				default: loc_variable = E_NOK;
			}
			break;
			case PD:
			switch(value)
 908:	66 23       	and	r22, r22
 90a:	81 f0       	breq	.+32     	; 0x92c <__stack+0xcd>
 90c:	61 30       	cpi	r22, 0x01	; 1
 90e:	39 f5       	brne	.+78     	; 0x95e <__stack+0xff>
			{
				case HIGH:
				SETBIT(PORTD,BIT);
 910:	42 b3       	in	r20, 0x12	; 18
 912:	21 e0       	ldi	r18, 0x01	; 1
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	b9 01       	movw	r22, r18
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
 91a:	66 0f       	add	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	8a 95       	dec	r24
 920:	e2 f7       	brpl	.-8      	; 0x91a <__stack+0xbb>
 922:	cb 01       	movw	r24, r22
 924:	84 2b       	or	r24, r20
 926:	82 bb       	out	0x12, r24	; 18

ERROR_status setpinvalue(DIO_Pin_type PIN,PIN_Volt_status value)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 928:	80 e0       	ldi	r24, 0x00	; 0
			case PD:
			switch(value)
			{
				case HIGH:
				SETBIT(PORTD,BIT);
				break;
 92a:	08 95       	ret
				case LOW:
				CLRBIT(PORTD,BIT);
 92c:	42 b3       	in	r20, 0x12	; 18
 92e:	21 e0       	ldi	r18, 0x01	; 1
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	b9 01       	movw	r22, r18
 934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0xdb>
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	8a 95       	dec	r24
 93c:	e2 f7       	brpl	.-8      	; 0x936 <__stack+0xd7>
 93e:	cb 01       	movw	r24, r22
 940:	80 95       	com	r24
 942:	84 23       	and	r24, r20
 944:	82 bb       	out	0x12, r24	; 18

ERROR_status setpinvalue(DIO_Pin_type PIN,PIN_Volt_status value)
{
	DIO_Port_type PORT=PIN/8;
	u8 BIT=PIN%8;
	ERROR_status loc_variable = E_OK;
 946:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH:
				SETBIT(PORTD,BIT);
				break;
				case LOW:
				CLRBIT(PORTD,BIT);
				break;
 948:	08 95       	ret
			default : loc_variable = E_NOK;
		}
	}
	else
	{
		loc_variable = E_NOK;
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	08 95       	ret
				CLRBIT(PORTD,BIT);
				break;
				default: loc_variable = E_NOK;
			}
			break;
			default : loc_variable = E_NOK;
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	08 95       	ret
				SETBIT(PORTA,BIT);
				break;
				case LOW:
				CLRBIT(PORTA,BIT);
				break;
				default: loc_variable = E_NOK;
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	08 95       	ret
				SETBIT(PORTB,BIT);
				break;
				case LOW:
				CLRBIT(PORTB,BIT);
				break;
				default: loc_variable = E_NOK;
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	08 95       	ret
				SETBIT(PORTC,BIT);
				break;
				case LOW:
				CLRBIT(PORTC,BIT);
				break;
				default: loc_variable = E_NOK;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	08 95       	ret
				SETBIT(PORTD,BIT);
				break;
				case LOW:
				CLRBIT(PORTD,BIT);
				break;
				default: loc_variable = E_NOK;
 95e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		loc_variable = E_NOK;
	}
	return loc_variable;
}
 960:	08 95       	ret

00000962 <USART_Init>:
	UART_RX_Fptr = LocalFptr;
}

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
	UART_TX_Fptr = LocalFptr;
 962:	83 e3       	ldi	r24, 0x33	; 51
 964:	89 b9       	out	0x09, r24	; 9
 966:	8b b1       	in	r24, 0x0b	; 11
 968:	8d 7f       	andi	r24, 0xFD	; 253
 96a:	8b b9       	out	0x0b, r24	; 11
 96c:	80 b5       	in	r24, 0x20	; 32
 96e:	8f 7e       	andi	r24, 0xEF	; 239
 970:	80 bd       	out	0x20, r24	; 32
 972:	80 b5       	in	r24, 0x20	; 32
 974:	8f 7d       	andi	r24, 0xDF	; 223
 976:	80 bd       	out	0x20, r24	; 32
 978:	80 b5       	in	r24, 0x20	; 32
 97a:	87 7f       	andi	r24, 0xF7	; 247
 97c:	80 bd       	out	0x20, r24	; 32
 97e:	8a b1       	in	r24, 0x0a	; 10
 980:	80 61       	ori	r24, 0x10	; 16
 982:	8a b9       	out	0x0a, r24	; 10
 984:	8a b1       	in	r24, 0x0a	; 10
 986:	88 60       	ori	r24, 0x08	; 8
 988:	8a b9       	out	0x0a, r24	; 10
 98a:	08 95       	ret

0000098c <USART_Transmit>:
 98c:	5d 9b       	sbis	0x0b, 5	; 11
 98e:	fe cf       	rjmp	.-4      	; 0x98c <USART_Transmit>
 990:	8c b9       	out	0x0c, r24	; 12
 992:	08 95       	ret

00000994 <USART_Receive>:
 994:	5f 9b       	sbis	0x0b, 7	; 11
 996:	fe cf       	rjmp	.-4      	; 0x994 <USART_Receive>
 998:	8c b1       	in	r24, 0x0c	; 12
 99a:	08 95       	ret

0000099c <__vector_13>:
}

ISR(USART_RXC_vect)
{
 99c:	1f 92       	push	r1
 99e:	0f 92       	push	r0
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	0f 92       	push	r0
 9a4:	11 24       	eor	r1, r1
 9a6:	2f 93       	push	r18
 9a8:	3f 93       	push	r19
 9aa:	4f 93       	push	r20
 9ac:	5f 93       	push	r21
 9ae:	6f 93       	push	r22
 9b0:	7f 93       	push	r23
 9b2:	8f 93       	push	r24
 9b4:	9f 93       	push	r25
 9b6:	af 93       	push	r26
 9b8:	bf 93       	push	r27
 9ba:	ef 93       	push	r30
 9bc:	ff 93       	push	r31
	if(UART_RX_Fptr!=NULL_PTR){
 9be:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <UART_RX_Fptr>
 9c2:	f0 91 fa 00 	lds	r31, 0x00FA	; 0x8000fa <UART_RX_Fptr+0x1>
 9c6:	30 97       	sbiw	r30, 0x00	; 0
 9c8:	09 f0       	breq	.+2      	; 0x9cc <__vector_13+0x30>
		UART_RX_Fptr();
 9ca:	09 95       	icall
	}
}
 9cc:	ff 91       	pop	r31
 9ce:	ef 91       	pop	r30
 9d0:	bf 91       	pop	r27
 9d2:	af 91       	pop	r26
 9d4:	9f 91       	pop	r25
 9d6:	8f 91       	pop	r24
 9d8:	7f 91       	pop	r23
 9da:	6f 91       	pop	r22
 9dc:	5f 91       	pop	r21
 9de:	4f 91       	pop	r20
 9e0:	3f 91       	pop	r19
 9e2:	2f 91       	pop	r18
 9e4:	0f 90       	pop	r0
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	0f 90       	pop	r0
 9ea:	1f 90       	pop	r1
 9ec:	18 95       	reti

000009ee <__vector_15>:

ISR(USART_TXC_vect)
{
 9ee:	1f 92       	push	r1
 9f0:	0f 92       	push	r0
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	0f 92       	push	r0
 9f6:	11 24       	eor	r1, r1
 9f8:	2f 93       	push	r18
 9fa:	3f 93       	push	r19
 9fc:	4f 93       	push	r20
 9fe:	5f 93       	push	r21
 a00:	6f 93       	push	r22
 a02:	7f 93       	push	r23
 a04:	8f 93       	push	r24
 a06:	9f 93       	push	r25
 a08:	af 93       	push	r26
 a0a:	bf 93       	push	r27
 a0c:	ef 93       	push	r30
 a0e:	ff 93       	push	r31
	if(UART_TX_Fptr!=NULL_PTR){
 a10:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <UART_TX_Fptr>
 a14:	f0 91 f8 00 	lds	r31, 0x00F8	; 0x8000f8 <UART_TX_Fptr+0x1>
 a18:	30 97       	sbiw	r30, 0x00	; 0
 a1a:	09 f0       	breq	.+2      	; 0xa1e <__vector_15+0x30>
		UART_TX_Fptr();
 a1c:	09 95       	icall
	}
}
 a1e:	ff 91       	pop	r31
 a20:	ef 91       	pop	r30
 a22:	bf 91       	pop	r27
 a24:	af 91       	pop	r26
 a26:	9f 91       	pop	r25
 a28:	8f 91       	pop	r24
 a2a:	7f 91       	pop	r23
 a2c:	6f 91       	pop	r22
 a2e:	5f 91       	pop	r21
 a30:	4f 91       	pop	r20
 a32:	3f 91       	pop	r19
 a34:	2f 91       	pop	r18
 a36:	0f 90       	pop	r0
 a38:	0f be       	out	0x3f, r0	; 63
 a3a:	0f 90       	pop	r0
 a3c:	1f 90       	pop	r1
 a3e:	18 95       	reti

00000a40 <__divmodhi4>:
 a40:	97 fb       	bst	r25, 7
 a42:	07 2e       	mov	r0, r23
 a44:	16 f4       	brtc	.+4      	; 0xa4a <__divmodhi4+0xa>
 a46:	00 94       	com	r0
 a48:	07 d0       	rcall	.+14     	; 0xa58 <__divmodhi4_neg1>
 a4a:	77 fd       	sbrc	r23, 7
 a4c:	09 d0       	rcall	.+18     	; 0xa60 <__divmodhi4_neg2>
 a4e:	0e 94 75 05 	call	0xaea	; 0xaea <__udivmodhi4>
 a52:	07 fc       	sbrc	r0, 7
 a54:	05 d0       	rcall	.+10     	; 0xa60 <__divmodhi4_neg2>
 a56:	3e f4       	brtc	.+14     	; 0xa66 <__divmodhi4_exit>

00000a58 <__divmodhi4_neg1>:
 a58:	90 95       	com	r25
 a5a:	81 95       	neg	r24
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	08 95       	ret

00000a60 <__divmodhi4_neg2>:
 a60:	70 95       	com	r23
 a62:	61 95       	neg	r22
 a64:	7f 4f       	sbci	r23, 0xFF	; 255

00000a66 <__divmodhi4_exit>:
 a66:	08 95       	ret

00000a68 <__udivmodsi4>:
 a68:	a1 e2       	ldi	r26, 0x21	; 33
 a6a:	1a 2e       	mov	r1, r26
 a6c:	aa 1b       	sub	r26, r26
 a6e:	bb 1b       	sub	r27, r27
 a70:	fd 01       	movw	r30, r26
 a72:	0d c0       	rjmp	.+26     	; 0xa8e <__udivmodsi4_ep>

00000a74 <__udivmodsi4_loop>:
 a74:	aa 1f       	adc	r26, r26
 a76:	bb 1f       	adc	r27, r27
 a78:	ee 1f       	adc	r30, r30
 a7a:	ff 1f       	adc	r31, r31
 a7c:	a2 17       	cp	r26, r18
 a7e:	b3 07       	cpc	r27, r19
 a80:	e4 07       	cpc	r30, r20
 a82:	f5 07       	cpc	r31, r21
 a84:	20 f0       	brcs	.+8      	; 0xa8e <__udivmodsi4_ep>
 a86:	a2 1b       	sub	r26, r18
 a88:	b3 0b       	sbc	r27, r19
 a8a:	e4 0b       	sbc	r30, r20
 a8c:	f5 0b       	sbc	r31, r21

00000a8e <__udivmodsi4_ep>:
 a8e:	66 1f       	adc	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	99 1f       	adc	r25, r25
 a96:	1a 94       	dec	r1
 a98:	69 f7       	brne	.-38     	; 0xa74 <__udivmodsi4_loop>
 a9a:	60 95       	com	r22
 a9c:	70 95       	com	r23
 a9e:	80 95       	com	r24
 aa0:	90 95       	com	r25
 aa2:	9b 01       	movw	r18, r22
 aa4:	ac 01       	movw	r20, r24
 aa6:	bd 01       	movw	r22, r26
 aa8:	cf 01       	movw	r24, r30
 aaa:	08 95       	ret

00000aac <__divmodsi4>:
 aac:	05 2e       	mov	r0, r21
 aae:	97 fb       	bst	r25, 7
 ab0:	1e f4       	brtc	.+6      	; 0xab8 <__divmodsi4+0xc>
 ab2:	00 94       	com	r0
 ab4:	0e 94 6d 05 	call	0xada	; 0xada <__negsi2>
 ab8:	57 fd       	sbrc	r21, 7
 aba:	07 d0       	rcall	.+14     	; 0xaca <__divmodsi4_neg2>
 abc:	0e 94 34 05 	call	0xa68	; 0xa68 <__udivmodsi4>
 ac0:	07 fc       	sbrc	r0, 7
 ac2:	03 d0       	rcall	.+6      	; 0xaca <__divmodsi4_neg2>
 ac4:	4e f4       	brtc	.+18     	; 0xad8 <__divmodsi4_exit>
 ac6:	0c 94 6d 05 	jmp	0xada	; 0xada <__negsi2>

00000aca <__divmodsi4_neg2>:
 aca:	50 95       	com	r21
 acc:	40 95       	com	r20
 ace:	30 95       	com	r19
 ad0:	21 95       	neg	r18
 ad2:	3f 4f       	sbci	r19, 0xFF	; 255
 ad4:	4f 4f       	sbci	r20, 0xFF	; 255
 ad6:	5f 4f       	sbci	r21, 0xFF	; 255

00000ad8 <__divmodsi4_exit>:
 ad8:	08 95       	ret

00000ada <__negsi2>:
 ada:	90 95       	com	r25
 adc:	80 95       	com	r24
 ade:	70 95       	com	r23
 ae0:	61 95       	neg	r22
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255
 ae4:	8f 4f       	sbci	r24, 0xFF	; 255
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	08 95       	ret

00000aea <__udivmodhi4>:
 aea:	aa 1b       	sub	r26, r26
 aec:	bb 1b       	sub	r27, r27
 aee:	51 e1       	ldi	r21, 0x11	; 17
 af0:	07 c0       	rjmp	.+14     	; 0xb00 <__udivmodhi4_ep>

00000af2 <__udivmodhi4_loop>:
 af2:	aa 1f       	adc	r26, r26
 af4:	bb 1f       	adc	r27, r27
 af6:	a6 17       	cp	r26, r22
 af8:	b7 07       	cpc	r27, r23
 afa:	10 f0       	brcs	.+4      	; 0xb00 <__udivmodhi4_ep>
 afc:	a6 1b       	sub	r26, r22
 afe:	b7 0b       	sbc	r27, r23

00000b00 <__udivmodhi4_ep>:
 b00:	88 1f       	adc	r24, r24
 b02:	99 1f       	adc	r25, r25
 b04:	5a 95       	dec	r21
 b06:	a9 f7       	brne	.-22     	; 0xaf2 <__udivmodhi4_loop>
 b08:	80 95       	com	r24
 b0a:	90 95       	com	r25
 b0c:	bc 01       	movw	r22, r24
 b0e:	cd 01       	movw	r24, r26
 b10:	08 95       	ret

00000b12 <do_rand>:
 b12:	8f 92       	push	r8
 b14:	9f 92       	push	r9
 b16:	af 92       	push	r10
 b18:	bf 92       	push	r11
 b1a:	cf 92       	push	r12
 b1c:	df 92       	push	r13
 b1e:	ef 92       	push	r14
 b20:	ff 92       	push	r15
 b22:	cf 93       	push	r28
 b24:	df 93       	push	r29
 b26:	ec 01       	movw	r28, r24
 b28:	68 81       	ld	r22, Y
 b2a:	79 81       	ldd	r23, Y+1	; 0x01
 b2c:	8a 81       	ldd	r24, Y+2	; 0x02
 b2e:	9b 81       	ldd	r25, Y+3	; 0x03
 b30:	61 15       	cp	r22, r1
 b32:	71 05       	cpc	r23, r1
 b34:	81 05       	cpc	r24, r1
 b36:	91 05       	cpc	r25, r1
 b38:	21 f4       	brne	.+8      	; 0xb42 <do_rand+0x30>
 b3a:	64 e2       	ldi	r22, 0x24	; 36
 b3c:	79 ed       	ldi	r23, 0xD9	; 217
 b3e:	8b e5       	ldi	r24, 0x5B	; 91
 b40:	97 e0       	ldi	r25, 0x07	; 7
 b42:	2d e1       	ldi	r18, 0x1D	; 29
 b44:	33 ef       	ldi	r19, 0xF3	; 243
 b46:	41 e0       	ldi	r20, 0x01	; 1
 b48:	50 e0       	ldi	r21, 0x00	; 0
 b4a:	0e 94 56 05 	call	0xaac	; 0xaac <__divmodsi4>
 b4e:	49 01       	movw	r8, r18
 b50:	5a 01       	movw	r10, r20
 b52:	9b 01       	movw	r18, r22
 b54:	ac 01       	movw	r20, r24
 b56:	a7 ea       	ldi	r26, 0xA7	; 167
 b58:	b1 e4       	ldi	r27, 0x41	; 65
 b5a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__muluhisi3>
 b5e:	6b 01       	movw	r12, r22
 b60:	7c 01       	movw	r14, r24
 b62:	ac ee       	ldi	r26, 0xEC	; 236
 b64:	b4 ef       	ldi	r27, 0xF4	; 244
 b66:	a5 01       	movw	r20, r10
 b68:	94 01       	movw	r18, r8
 b6a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__mulohisi3>
 b6e:	dc 01       	movw	r26, r24
 b70:	cb 01       	movw	r24, r22
 b72:	8c 0d       	add	r24, r12
 b74:	9d 1d       	adc	r25, r13
 b76:	ae 1d       	adc	r26, r14
 b78:	bf 1d       	adc	r27, r15
 b7a:	b7 ff       	sbrs	r27, 7
 b7c:	03 c0       	rjmp	.+6      	; 0xb84 <do_rand+0x72>
 b7e:	01 97       	sbiw	r24, 0x01	; 1
 b80:	a1 09       	sbc	r26, r1
 b82:	b0 48       	sbci	r27, 0x80	; 128
 b84:	88 83       	st	Y, r24
 b86:	99 83       	std	Y+1, r25	; 0x01
 b88:	aa 83       	std	Y+2, r26	; 0x02
 b8a:	bb 83       	std	Y+3, r27	; 0x03
 b8c:	9f 77       	andi	r25, 0x7F	; 127
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	ff 90       	pop	r15
 b94:	ef 90       	pop	r14
 b96:	df 90       	pop	r13
 b98:	cf 90       	pop	r12
 b9a:	bf 90       	pop	r11
 b9c:	af 90       	pop	r10
 b9e:	9f 90       	pop	r9
 ba0:	8f 90       	pop	r8
 ba2:	08 95       	ret

00000ba4 <rand_r>:
 ba4:	0e 94 89 05 	call	0xb12	; 0xb12 <do_rand>
 ba8:	08 95       	ret

00000baa <rand>:
 baa:	80 e6       	ldi	r24, 0x60	; 96
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	0e 94 89 05 	call	0xb12	; 0xb12 <do_rand>
 bb2:	08 95       	ret

00000bb4 <srand>:
 bb4:	a0 e0       	ldi	r26, 0x00	; 0
 bb6:	b0 e0       	ldi	r27, 0x00	; 0
 bb8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 bbc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 bc0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 bc4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 bc8:	08 95       	ret

00000bca <strcmp>:
 bca:	fb 01       	movw	r30, r22
 bcc:	dc 01       	movw	r26, r24
 bce:	8d 91       	ld	r24, X+
 bd0:	01 90       	ld	r0, Z+
 bd2:	80 19       	sub	r24, r0
 bd4:	01 10       	cpse	r0, r1
 bd6:	d9 f3       	breq	.-10     	; 0xbce <strcmp+0x4>
 bd8:	99 0b       	sbc	r25, r25
 bda:	08 95       	ret

00000bdc <__muluhisi3>:
 bdc:	0e 94 01 06 	call	0xc02	; 0xc02 <__umulhisi3>
 be0:	a5 9f       	mul	r26, r21
 be2:	90 0d       	add	r25, r0
 be4:	b4 9f       	mul	r27, r20
 be6:	90 0d       	add	r25, r0
 be8:	a4 9f       	mul	r26, r20
 bea:	80 0d       	add	r24, r0
 bec:	91 1d       	adc	r25, r1
 bee:	11 24       	eor	r1, r1
 bf0:	08 95       	ret

00000bf2 <__mulshisi3>:
 bf2:	b7 ff       	sbrs	r27, 7
 bf4:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__muluhisi3>

00000bf8 <__mulohisi3>:
 bf8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__muluhisi3>
 bfc:	82 1b       	sub	r24, r18
 bfe:	93 0b       	sbc	r25, r19
 c00:	08 95       	ret

00000c02 <__umulhisi3>:
 c02:	a2 9f       	mul	r26, r18
 c04:	b0 01       	movw	r22, r0
 c06:	b3 9f       	mul	r27, r19
 c08:	c0 01       	movw	r24, r0
 c0a:	a3 9f       	mul	r26, r19
 c0c:	70 0d       	add	r23, r0
 c0e:	81 1d       	adc	r24, r1
 c10:	11 24       	eor	r1, r1
 c12:	91 1d       	adc	r25, r1
 c14:	b2 9f       	mul	r27, r18
 c16:	70 0d       	add	r23, r0
 c18:	81 1d       	adc	r24, r1
 c1a:	11 24       	eor	r1, r1
 c1c:	91 1d       	adc	r25, r1
 c1e:	08 95       	ret

00000c20 <_exit>:
 c20:	f8 94       	cli

00000c22 <__stop_program>:
 c22:	ff cf       	rjmp	.-2      	; 0xc22 <__stop_program>
